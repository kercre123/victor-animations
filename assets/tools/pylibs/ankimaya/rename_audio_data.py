
# This script's main() should be executed by mayapy
# (/Applications/Autodesk/maya2016//Maya.app/Contents/bin/mayapy) NOT from within
# an interactive Maya session.


WRAPPER_SCRIPT = "rename_anim_data.sh"

SVN_REPO_WITH_MAYA_FILES = "victor-animation"

MAYA_FILE_DIR = "scenes"


import sys
import os
import re
import stat
import pprint
import csv
import maya.standalone
from maya import cmds
from ankimaya import export_for_robot, audio_core
from ankimaya.rename_anim_clips import TOOLS_DIR_ENV_VAR, OUTPUT_PACKAGE_EXT
from ankiutils.svn_tools import get_svn_workspace
from ankiutils.anim_files import get_all_maya_files


def rename_maya_events(rename_mapping, maya_file, files_to_commit):

    # Open the maya file and rename audio events
    maya.standalone.initialize()
    workspace_root_dir = os.path.dirname(os.getenv(TOOLS_DIR_ENV_VAR))
    cmds.workspace(workspace_root_dir, openWorkspace=True)
    cmds.file(maya_file, open=True, force=True)
    print("Opened maya file: %s" % maya_file)

    # Select the audio node and then call audio_core.setupEnumAttr() with the rename mapping.
    try:
        cmds.select(audio_core.AUDIO_NODE_NAME)
    except ValueError:
        return None
    eventNamesSorted, audioIds = audio_core.loadAudioAttrs()
    num_events_renamed = audio_core.setupEnumAttr(eventNamesSorted, renameMapping=rename_mapping)

    if num_events_renamed > 0:
        # If any events were renamed, then we need to export anim data, save the Maya file
        # and commit all of those files.
        print("... and renamed %s audio events in that file" % num_events_renamed)
        files_to_commit.append(os.path.realpath(maya_file))
        files_to_commit.extend(export_anim())
        maya_file_stat = os.stat(maya_file)
        os.chmod(maya_file, maya_file_stat.st_mode | stat.S_IWUSR)
        cmds.file(force=True, type='mayaAscii', save=True)

    return num_events_renamed


def export_anim():
    # Redirect output stream to hide verbose output from the export
    sys_stdout = sys.stdout
    dev_null = open(os.devnull, 'w')
    sys.stdout = dev_null

    output_files = export_for_robot.export_robot_anim(all_clips=True, save_maya_file=False)

    # Restore output stream after export
    dev_null.close()
    sys.stdout = sys_stdout

    # Return the list of tar files that was generated by export
    tar_files = [str(output_file) for output_file in output_files if output_file.endswith(OUTPUT_PACKAGE_EXT)]
    return tar_files


def get_rename_mapping(args):
    rename_mapping = {}
    mapping_csv_file = args[0]
    with open(mapping_csv_file, 'rb') as fh:
        reader = csv.reader(fh)
        for row in reader:
            old_name = row[0]
            if not old_name:
                continue
            new_name = row[1]
            if not new_name:
                raise ValueError("Rename target for '%s' not specified" % old_name)
            if old_name in rename_mapping and rename_mapping[old_name] != new_name:
                raise ValueError("Found multiple rename targets for '%s' ('%s' and '%s')"
                                 % (old_name, rename_mapping[old_name], new_name))
            rename_mapping[old_name] = new_name
    print(os.linesep + "rename mapping = %s" % pprint.pformat(rename_mapping))
    return rename_mapping


def main(args=None):
    files_to_commit = []

    if args is None:
        args = sys.argv[1:]
    rename_mapping = get_rename_mapping(args)

    svn_workspace = get_svn_workspace()
    maya_files_dir = os.path.join(svn_workspace, SVN_REPO_WITH_MAYA_FILES, MAYA_FILE_DIR)
    print(os.linesep + "maya_files_dir = %s" % maya_files_dir)
    maya_files = get_all_maya_files(maya_files_dir)
    for maya_file in maya_files:
        print('')
        try:
            rename_maya_events(rename_mapping, maya_file, files_to_commit)
        except StandardError, e:
            print("Failed to rename audio events in %s because: %s" % (maya_file, e))

    if files_to_commit:
        print(os.linesep + ("-" * 80) + os.linesep)
        print("Commit the following files to SVN (in Cornerstone):%s%s%s"
              % (os.linesep, pprint.pformat(files_to_commit), os.linesep))


