
# This script's main() should be executed by mayapy
# (/Applications/Autodesk/maya2016/Maya.app/Contents/bin/mayapy) NOT from within
# an interactive Maya session.


# TODO: The rename results from Shotgun give us the source Maya file for each
# renamed anim clip and the animation groups that use each renamed anim clip.
# When this tool updates those Maya files and animation group .json files, it
# currently looks to see if it needs to replace every renamed anim clip, but it
# would be more efficient to only look to rename the anim clips that correspond
# to that file.


WRAPPER_SCRIPT = "rename_anim_data.sh"

COZMO_SG_PROJECT = "Cozmo Production"
VICTOR_SG_PROJECT = "Victor Production"
DEFAULT_SG_PROJECT = "Cozmo Testing"


import sys
import os
import re
import stat
import pprint
import maya.standalone
from maya import cmds
import anim_groups
from ankishotgun import rename_entities
from ankiutils.svn_tools import get_svn_workspace, get_svn_file_path


def rename_maya_clips(rename_mapping, maya_file, files_to_commit):

    # Open the maya file and rename anim clips
    maya.standalone.initialize()
    from ankimaya.rename_anim_clips import TOOLS_DIR_ENV_VAR
    workspace_root_dir = os.path.dirname(os.getenv(TOOLS_DIR_ENV_VAR))
    cmds.workspace(workspace_root_dir, openWorkspace=True)
    cmds.file(maya_file, open=True, force=True)
    print("Opened maya file: %s" % maya_file)
    from ankimaya import game_exporter
    num_clips_renamed = game_exporter.rename_clips_exact_match(rename_mapping)
    print("... and renamed %s animation clips in that file" % num_clips_renamed)

    if num_clips_renamed > 0:
        # If any clips were renamed, then we need to export anim data, save the Maya file
        # and commit all of those files.
        files_to_commit.append(os.path.realpath(maya_file))
        files_to_commit.extend(export_anim())
        maya_file_stat = os.stat(maya_file)
        os.chmod(maya_file, maya_file_stat.st_mode | stat.S_IWUSR)
        cmds.file(force=True, type='mayaAscii', save=True)

    return num_clips_renamed


def export_anim():
    # Redirect output stream to hide verbose output from the export
    sys_stdout = sys.stdout
    dev_null = open(os.devnull, 'w')
    sys.stdout = dev_null

    from ankimaya import export_for_robot
    output_files = export_for_robot.export_robot_anim(all_clips=True, save_maya_file=False)

    # Restore output stream after export
    dev_null.close()
    sys.stdout = sys_stdout

    # Return the list of tar files that was generated by export
    from ankimaya.rename_anim_clips import OUTPUT_PACKAGE_EXT
    tar_files = [str(output_file) for output_file in output_files if output_file.endswith(OUTPUT_PACKAGE_EXT)]
    return tar_files


def rename_in_shotgun(args, sg_proj=DEFAULT_SG_PROJECT):
    print("command line args = %s" % args + os.linesep)
    if not isinstance(sg_proj, list) and not isinstance(sg_proj, tuple):
        sg_proj = [sg_proj]
    try:
        rename_results = rename_entities.main(args, sg_proj)
    except ValueError, e:
        usage_msg = rename_entities.USAGE_MSG
        usage_msg = re.sub(r"\brename_entities.[a-z]+\b", WRAPPER_SCRIPT, usage_msg)
        print(os.linesep + usage_msg + os.linesep)
        raise
    return rename_results


def process_rename_results(list_of_tuples, svn_workspace):
    rename_mapping = {}
    anim_files = []
    anim_group_files = []
    for old_name, new_name, anim_file, anim_groups in list_of_tuples:
        if anim_file is None and anim_groups is None:
            # This is a VERSION from Shotgun, not an asset, so it can be ignored here.
            continue
        if old_name in rename_mapping:
            print("ERROR: Found multiple instances of asset previously named '%s' (new name = '%s')"
                  % (old_name, new_name))
        rename_mapping[old_name] = new_name
        if anim_file:
            anim_file = get_svn_file_path(anim_file, svn_workspace)
            if anim_file not in anim_files:
                anim_files.append(anim_file)
        for anim_group_file in anim_groups:
            if anim_group_file:
                anim_group_file = get_svn_file_path(anim_group_file, svn_workspace)
                if anim_group_file not in anim_group_files:
                    anim_group_files.append(anim_group_file)
    print(os.linesep + "rename mapping = %s" % pprint.pformat(rename_mapping))
    print(os.linesep + "anim_files = %s" % pprint.pformat(anim_files))
    print(os.linesep + "anim group files = %s" % pprint.pformat(anim_group_files) + os.linesep)
    return (rename_mapping, anim_files, anim_group_files)


def main(args=None):
    files_to_commit = []

    if args is None:
        args = sys.argv

    rename_results = rename_in_shotgun(args)
    if not rename_results:
        print("No assets renamed in Shotgun so nothing to rename in Maya source files or in "
              "animation group .json files")
        return files_to_commit

    svn_workspace = get_svn_workspace()
    rename_mapping, anim_files, anim_group_files = process_rename_results(rename_results, svn_workspace)
    if anim_files:
        for anim_file in anim_files:
            if anim_file.endswith(".ma"):
                # This is a Maya scene file, so rename the animation clips in there
                try:
                    rename_maya_clips(rename_mapping, anim_file, files_to_commit)
                except StandardError, e:
                    print("Failed to rename anim clips in %s because: %s" % (anim_file, e))
            elif anim_file.endswith(".json"):
                # This is an animation group .json file, so rename this file
                anim_groups.rename_anim_group(rename_mapping, anim_file, files_to_commit)
    else:
        print("No animation file(s) specified for renaming animation clips or groups")

    for anim_group_file in anim_group_files:
        print(os.linesep + "Checking animation group file: %s" % anim_group_file)
        try:
            num_clips_renamed = anim_groups.rename_anim_clips(rename_mapping, anim_group_file)
        except StandardError, e:
            print("Failed to rename anim clips in %s because: %s" % (anim_group_file, e))
            num_clips_renamed = 0
        if num_clips_renamed > 0:
            files_to_commit.append(os.path.realpath(anim_group_file))

    if files_to_commit:
        print(os.linesep + ("-" * 80) + os.linesep)
        print("Commit the following files to SVN (in Cornerstone):%s%s%s"
              % (os.linesep, pprint.pformat(files_to_commit), os.linesep))


